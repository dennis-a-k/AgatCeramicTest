import{C as k,r as l,d as g,s as z}from"#entry";const _={categories:{nameField:"name"},brands:{nameField:"name"},colors:{nameField:"name"},patterns:{nameField:"name"},weights:{nameField:"value"},subcategories:{nameField:"name"},glues:{nameField:"name"},mixture_types:{nameField:"name"},seams:{nameField:"name"},textures:{nameField:"name"},countries:{nameField:"name"},sizes:{nameField:"name"},materials:{nameField:"name"},waterproofs:{nameField:"name"},collections:{nameField:"name"},volumes:{nameField:"value"},product_weights:{nameField:"value"},installation_types:{nameField:"name"},shapes:{nameField:"name"},applications:{nameField:"name"},drying_times:{nameField:"name"},package_weights:{nameField:"value"},min_temps:{nameField:"value"},max_temps:{nameField:"value"},consumptions:{nameField:"name"}},o=Object.keys(_),F={category:"categories",brand:"brands",color:"colors",pattern:"patterns",weight:"weights",subcategory:"subcategories",glue:"glues",mixture_type:"mixture_types",seam:"seams",texture:"textures",country:"countries",size:"sizes",material:"materials",waterproof:"waterproofs",collection:"collections",volume:"volumes",product_weight:"product_weights",installation_type:"installation_types",shape:"shapes",application:"applications",drying_time:"drying_times",package_weight:"package_weights",min_temp:"min_temps",max_temp:"max_temps",consumption:"consumptions"},A=(c,m)=>{let s;return(...t)=>{clearTimeout(s),s=setTimeout(()=>c(...t),m)}},S=k("brand",()=>{const c=l([]),m=l(!1),s=l(Object.fromEntries(o.map(e=>[e,[]]))),t=l(Object.fromEntries(o.map(e=>[e,[]]))),v=l(""),f=l(""),u=l("default"),r=l(1),b=g(()=>{const e={...t.value,min_price:v.value,max_price:f.value,sort:u.value,page:r.value};return e.categories&&e.categories.length>0&&(e.category_ids=e.categories,delete e.categories),Object.keys(e).forEach(a=>{const n=e[a];(n===""||n===null||n===void 0||Array.isArray(n)&&n.length===0)&&delete e[a]}),e}),y=g(()=>{const e=[];return o.forEach(a=>{t.value[a].forEach(n=>{const i=s.value[a].find(p=>p.id===n);if(i){const p=_[a];e.push({type:a,id:n,name:i[p.nameField]})}})}),e}),x=e=>{Object.assign(s.value,e)},d=e=>{o.forEach(a=>{t.value[a]=e[a]||[]}),r.value=1},h=A(d,300),w=e=>{r.value=e},E=e=>{u.value=e,r.value=1},O=(e,a)=>{const n=F[e]||e;t.value[n]&&(t.value[n]=t.value[n].filter(i=>i!==a)),d(t.value)},C=(e,a)=>{const n=F[e]||e;if(t.value[n]){const i=t.value[n].indexOf(a);i===-1?t.value[n].push(a):t.value[n].splice(i,1)}h(t.value)},j=()=>{o.forEach(e=>{t.value[e]=[]}),u.value="default",r.value=1,Object.keys(s.value).forEach(e=>{s.value[e]=[]})},P=async()=>{try{m.value=!0;const e=z(),a=await $fetch(`${e.public.apiBase}/api/brands`);c.value=a.data||a}catch(e){console.error("Error fetching brands:",e),c.value=[]}finally{m.value=!1}},T=Object.fromEntries(o.map(e=>[`selected${e.charAt(0).toUpperCase()+e.slice(1)}`,g(()=>t.value[e])]));return{brands:c,brandsLoading:m,filters:s,selected:t,minPrice:v,maxPrice:f,sortOption:u,currentPage:r,...T,queryParams:b,selectedFilters:y,fetchBrands:P,setFilters:x,handleFilterChange:d,debouncedHandleFilterChange:h,changePage:w,handleSortChange:E,removeFilter:O,selectFilter:C,resetFilters:j}});export{S as u};
