name: Deploy AgatCeramic

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean npm cache and reinstall
        run: |
          cd frontend
          # Удаляем проблемные файлы
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies with retry
        run: |
          cd frontend
          # Первая попытка установки
          npm install --no-audit --no-fund || true
          # Если первая попытка неудачна, чистим и пробуем снова
          if [ $? -ne 0 ]; then
            echo "Первая попытка неудачна, очищаем и пробуем снова..."
            rm -rf node_modules package-lock.json
            npm install --no-audit --no-fund
          fi

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Verify build
        run: |
          cd frontend
          # Проверяем существование папки сборки
          if [ -d "dist" ]; then
            echo "Build успешно создан в папке dist"
            ls -la dist/
          elif [ -d "build" ]; then
            echo "Build успешно создан в папке build"
            ls -la build/
          else
            echo "Ошибка: папка сборки не найдена"
            ls -la
            exit 1
          fi

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/dist/
            frontend/build/
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-dist

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BEGET_HOST }}
          username: ${{ secrets.BEGET_USER }}
          key: ${{ secrets.BEGET_PRIVATE_KEY }}
          script: |
            set -e
            echo "Начинаем деплой..."
            cd /home/d/dennistp/test.dennistp.beget.tech

            echo "Обновляем код из репозитория..."
            git pull origin main

            echo "Запускаем backend обновление..."
            cd backend

            # Проверяем существование composer.phar
            if [ ! -f "composer.phar" ]; then
                echo "Composer не найден, устанавливаем..."
                curl -sS https://getcomposer.org/installer | php8.4
            fi

            php8.4 artisan down
            php8.4 composer.phar install --no-dev --optimize-autoloader --no-interaction
            php8.4 artisan migrate --force
            php8.4 artisan config:cache
            php8.4 artisan event:cache
            php8.4 artisan route:cache
            php8.4 artisan view:cache
            php8.4 artisan up

            echo "Обновляем фронтенд..."
            cd ..

            # Определяем папку сборки
            if [ -d "frontend-dist/dist" ]; then
                echo "Копируем собранный фронтенд из dist..."
                rm -rf frontend/dist
                cp -r frontend-dist/dist frontend/
            elif [ -d "frontend-dist/build" ]; then
                echo "Копируем собранный фронтенд из build..."
                rm -rf frontend/build
                cp -r frontend-dist/build frontend/
            else
                echo "Ошибка: не найдена папка сборки фронтенда"
                ls -la frontend-dist/
                exit 1
            fi

            # Очищаем временные файлы
            rm -rf frontend-dist

            echo "Деплой завершен успешно!"
            echo "Приложение доступно по ссылке: https://test.dennistp.beget.tech"

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Cleanup
        run: echo "Workflow завершен"
