name: Deploy AgatCeramic

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Убираем кеширование, так как package-lock.json может отсутствовать

      - name: Check frontend structure
        run: |
          echo "Проверяем структуру frontend папки:"
          cd frontend
          ls -la
          echo "package-lock.json exists: $(test -f package-lock.json && echo 'YES' || echo 'NO')"
          echo "yarn.lock exists: $(test -f yarn.lock && echo 'YES' || echo 'NO')"
          echo "npm-shrinkwrap.json exists: $(test -f npm-shrinkwrap.json && echo 'YES' || echo 'NO')"

      - name: Clean npm cache and remove lock files
        run: |
          cd frontend
          # Удаляем все lock файлы чтобы избежать конфликтов
          rm -f package-lock.json
          rm -f yarn.lock
          rm -f npm-shrinkwrap.json
          rm -rf node_modules
          npm cache clean --force

      - name: Install frontend dependencies
        run: |
          cd frontend
          echo "Устанавливаем зависимости..."
          npm install --no-audit --no-fund --prefer-offline --no-optional

          # Если есть ошибки, пробуем с флагом --legacy-peer-deps
          if [ $? -ne 0 ]; then
            echo "Пробуем установку с --legacy-peer-deps..."
            npm install --no-audit --no-fund --legacy-peer-deps --no-optional
          fi

      - name: Create lock file for future caching
        run: |
          cd frontend
          # Создаем package-lock.json для будущих кеширований
          npm install --package-lock-only --no-audit --no-fund

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Verify build
        run: |
          cd frontend
          # Проверяем существование папки сборки
          if [ -d "dist" ]; then
            echo "Build успешно создан в папке dist"
            ls -la dist/
          elif [ -d "build" ]; then
            echo "Build успешно создан в папке build"
            ls -la build/
          elif [ -d "out" ]; then
            echo "Build успешно создан в папке out"
            ls -la out/
          elif [ -d "public" ]; then
            echo "Build успешно создан в папке public"
            ls -la public/
          else
            echo "Ищем папку сборки..."
            find . -type d -name "*dist*" -o -name "*build*" -o -name "*out*" | head -10
            exit 1
          fi

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/dist/
            frontend/build/
            frontend/out/
            frontend/public/
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-artifacts

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BEGET_HOST }}
          username: ${{ secrets.BEGET_USER }}
          key: ${{ secrets.BEGET_PRIVATE_KEY }}
          script: |
            set -e
            echo "Начинаем деплой..."
            cd /home/d/dennistp/test.dennistp.beget.tech

            echo "Обновляем код из репозитория..."
            git pull origin main

            echo "Запускаем backend обновление..."
            cd backend

            # Проверяем существование composer.phar
            if [ ! -f "composer.phar" ]; then
                echo "Composer не найден, устанавливаем..."
                curl -sS https://getcomposer.org/installer | php8.4
            fi

            php8.4 artisan down
            php8.4 composer.phar install --no-dev --optimize-autoloader --no-interaction
            php8.4 artisan migrate --force
            php8.4 artisan config:cache
            php8.4 artisan event:cache
            php8.4 artisan route:cache
            php8.4 artisan view:cache
            php8.4 artisan up

            echo "Обновляем фронтенд..."
            cd ..

            # Копируем собранные файлы фронтенда
            echo "Копируем артефакты сборки..."
            if [ -d "frontend-artifacts/dist" ]; then
                rm -rf frontend/dist
                cp -r frontend-artifacts/dist frontend/
                echo "Скопирована папка dist"
            elif [ -d "frontend-artifacts/build" ]; then
                rm -rf frontend/build
                cp -r frontend-artifacts/build frontend/
                echo "Скопирована папка build"
            elif [ -d "frontend-artifacts/out" ]; then
                rm -rf frontend/out
                cp -r frontend-artifacts/out frontend/
                echo "Скопирована папка out"
            elif [ -d "frontend-artifacts/public" ]; then
                rm -rf frontend/public
                cp -r frontend-artifacts/public frontend/
                echo "Скопирована папка public"
            else
                echo "Содержимое frontend-artifacts:"
                ls -la frontend-artifacts/
                echo "Ошибка: не найдена папка сборки фронтенда"
                exit 1
            fi

            # Очищаем временные файлы
            rm -rf frontend-artifacts

            echo "Деплой завершен успешно!"
            echo "Приложение доступно по ссылке: https://test.dennistp.beget.tech"

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Cleanup completed
        run: echo "Workflow завершен"
